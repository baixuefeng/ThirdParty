VS命令行
cmd /k "%VS140COMNTOOLS%..\..\VC\vcvarsall.bat" x86
cmd /k "%VS140COMNTOOLS%..\..\VC\vcvarsall.bat" x64

环境变量
set CFLAGS=/DWIN32_LEAN_AND_MEAN /D_WIN32_WINNT=0x0601 /source-charset:utf-8

编译命令
cmake --build . --target install --clean-first

zlib
cmake -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX=out -DCMAKE_BUILD_TYPE=Release ..


openssl
/* 1. 需要安装perl和nasm
   2. -DOPENSSL_NO_ASYNC ios上不定义该宏，会包含一些系统私有的api调用，评审过不了。实测，定义该宏，对
   boost::asio的异步ssl封装没有影响
   3. --debug --release(默认)
   4. tlsv1.3开始禁用了压缩，且之前的版本也不推荐使用压缩，所以最好不集成zlib:
        zlib --with-zlib-include="%cd%\..\zlib\win64\include" --with-zlib-lib="%cd%\..\zlib\win64\lib\zlib.lib"
*/
perl Configure VC-WIN32 --prefix="%cd%\..\OpenSSL\win32" --openssldir=.\SSL -DOPENSSL_NO_ASYNC
perl Configure VC-WIN64A --prefix="%cd%\..\OpenSSL\win64" --openssldir=.\SSL -DOPENSSL_NO_ASYNC
nmake
nmake install_sw
nmake install_ssldirs 
nmake install_docs

curl
cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
最小cmake版本改为3.14或以上

set PLAT_NAME=win32
set 3rd_base=E:\dev_dir\VS_Project\Gym\ThirdParty
cmake -G"NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="%3rd_base%\curl\%PLAT_NAME%" -DBUILD_SHARED_LIBS=ON -DCURL_ZLIB=ON -DZLIB_ROOT="%3rd_base%\zlib\%PLAT_NAME%" -DCURL_BROTLI=ON -DBrotli_DIR="%3rd_base%" -DBrotli_ROOT="%3rd_base%\brotli\%PLAT_NAME%" -DCMAKE_USE_OPENSSL=ON -DOPENSSL_ROOT_DIR="%3rd_base%\OpenSSL\%PLAT_NAME%" -DBUILD_TESTING=OFF .. 


glew
cmake -G"NMake Makefiles" -DCMAKE_INSTALL_PREFIX=out -DCMAKE_BUILD_TYPE=Release ..


lua
cmake -G"NMake Makefiles" -DCMAKE_BUILD_TYPE=Release ..

sqlite
cmake -G"NMake Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=../out .. 

cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="D:/dev_code/ThirdParty/SDL2/win64" -G "NMake Makefiles" ..
